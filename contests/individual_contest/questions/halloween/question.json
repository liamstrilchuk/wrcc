{
	"name": "Halloween",
	"short_name": "halloween",
	"content": "It's Halloween again, and you want to maximise the amount of candy that you get. You also know all of your neighbours very well, and you know how long you'll have to make small talk with each of them, and how many pieces of candy each of them will give you. In preparation for today, you've made a map of your neighbourhood (conveniently, it's just a single straight road). For example, if there are five houses, the map would look like this, where H is the starting point:<pre> H\nA╬B\n ║\nC╬D\n ║\nE╝</pre>Each road segment takes one minute to travel along. For example:<ul><li>Going from A to B (the first to second houses) would take one minute.</li><li>Going from B to E (the second to fifth houses) would take five minutes.</li><li>Going from H to A (the starting point to the first house) would take one minute.</li><li>Going from A to C (the first to third houses) would take three minutes.</li></ul>",
	"input": "The first line of input consists of two integers: n (1 ≤ n ≤ 15), the number of houses; and c (1 ≤ c ≤ 105), the number of pieces of candy that you want. Each of the following n lines of input contains two integers: t (0 ≤ t ≤ 100), the number of minutes that neighbour will spend talking to you; and p (0 ≤ p ≤ 100), the number of pieces of candy that neighbour will give you. It is guaranteed that the sum of all p ≤ c.",
	"output": "Output one integer: the minimum number of minutes required to get c pieces of candy and return to your house.",
	"test_cases": [
		{
			"input": "tc1.in",
			"output": "tc1.out",
			"percent_value": 0
		},
		{
			"input": "tc2.in",
			"output": "tc2.out",
			"percent_value": 100
		}
	],
	"sample_test_cases": [
		{
			"input": "5 7\n10 2\n8 3\n4 1\n0 2\n12 5",
			"output": "23"
		}
	],
	"point_value": 12
}
